library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
View(scores)
setwd("~/")
userid <- "rpe5"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
abs_states <- scores %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
abs_WIS = mean(WIS)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(abs_flusight, aes(x = target_end_date,
y = abs_WIS, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey", .5)) +
labs(y = "Absolute WIS",
x = "",
color = "Model",
title = "1 Week Ahead Absolute WIS by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
g
abs_states <- scores %>% filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
abs_WIS = mean(WIS)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
p <- ggplot(abs_flusight, aes(x = target_end_date,
y = abs_WIS, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey", .5)) +
labs(y = "Absolute WIS",
x = "",
color = "Model",
title = "4 Week Ahead Absolute WIS by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
p
pdf(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Abs_WIS_States_1and4week_figure.pdf"), width=8, height=5)
grid.arrange(g, p, ncol = 1)
dev.off()
userid <- "rpe5"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
coverage95 <- scores %>% filter(location_name == "National") %>%
# filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/4) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_flusight <- coverage95 %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95 %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage95_flusight, aes(x = forecast_date,
y = coverage95, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage95_not_flusight, aes(x = forecast_date, y = coverage95, group = model), color = adjustcolor("grey", .5)) +
labs(y = "95% Coverage",
x = "",
color = "Model",
title = "95% Coverage by Model") +
scale_x_date(date_breaks = "2 weeks", date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#theme_minimal()
g
userid <- "rpe5"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
coverage95 <- scores %>% filter(location_name == "National") %>%
# filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/4) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_flusight <- coverage95 %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95 %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage95_flusight, aes(x = forecast_date,
y = coverage95, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage95_not_flusight, aes(x = forecast_date, y = coverage95, group = model), color = adjustcolor("grey", .5)) +
labs(y = "95% Coverage",
x = "",
color = "Model",
title = "95% Coverage by Model") +
scale_x_date(date_breaks = "2 weeks", date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#theme_minimal()
g
coverage50 <- scores %>% filter(location_name == "National") %>%
# filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/4) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_flusight <- coverage50 %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage50_not_flusight <- coverage50 %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage50_flusight, aes(x = forecast_date,
y = coverage50, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage50_not_flusight, aes(x = forecast_date, y = coverage50, group = model), color = adjustcolor("grey", .5)) +
labs(y = "50% Coverage",
x = "",
color = "Model",
title = "50% Coverage by Model") +
scale_x_date(date_breaks = "2 weeks", date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#theme_minimal()
g
coverage95_states <- scores %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
coverage95 = mean(coverage.95)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_flusight <- coverage95_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage95_flusight, aes(x = target_end_date,
y = coverage95, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage95_not_flusight, aes(x = target_end_date, y = coverage95, group = model), color = adjustcolor("grey", .5)) +
labs(y = "95% Coverage",
x = "",
color = "Model",
title = "1 Week Ahead 95% Coverage by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(coverage95_flusight$target_end_date), to= max(coverage95_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
g
coverage95_states <- scores %>% filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
coverage95 = mean(coverage.95)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_flusight <- coverage95_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
p <- ggplot(coverage95_flusight, aes(x = target_end_date,
y = coverage95, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage95_not_flusight, aes(x = target_end_date, y = coverage95, group = model), color = adjustcolor("grey", .5)) +
labs(y = "95% Coverage",
x = "",
color = "Model",
title = "4 Week Ahead 95% Coverage by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(coverage95_flusight$target_end_date), to= max(coverage95_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#theme_minimal()
p
coverage50_states <- scores %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
coverage50 = mean(coverage.50)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_flusight <- coverage50_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage50_not_flusight <- coverage50_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage50_flusight, aes(x = target_end_date,
y = coverage50, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage50_not_flusight, aes(x = target_end_date, y = coverage50, group = model), color = adjustcolor("grey", .5)) +
labs(y = "50% Coverage",
x = "",
color = "Model",
title = "1 Week Ahead 50% Coverage by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(coverage50_flusight$target_end_date), to= max(coverage50_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#theme_minimal()
g
coverage50_states <- scores %>% filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
coverage50 = mean(coverage.50)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_flusight <- coverage50_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage50_not_flusight <- coverage50_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
p <- ggplot(coverage50_flusight, aes(x = target_end_date,
y = coverage50, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage50_not_flusight, aes(x = target_end_date, y = coverage50, group = model), color = adjustcolor("grey", .5)) +
labs(y = "50% Coverage",
x = "",
color = "Model",
title = "4 Week Ahead 50% Coverage by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(coverage50_flusight$target_end_date), to= max(coverage50_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
p
locationcount <- length(unique(scores$location_name)) - 1
coverage95_summary <- scores %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) #%>%
#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_summary <- scores %>% filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount)# %>%
# mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
summary(coverage95_summary$coverage95)
summary(coverage50_summary$coverage50)
coverage95_summary_all <- scores %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique() %>%
group_by(model) %>% summarise(model = model,
avg = mean(coverage95)) %>% unique()
#%>%
#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_summary_all <- scores %>% filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount)# %>%
# mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
summary(coverage95_summary_all$coverage95)
summary(coverage50_summary_all$coverage50)
coverage95_summary_all2 <- scores %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "2 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique() %>%
group_by(model) %>% summarise(model = model,
avg = mean(coverage95)) %>% unique()
weekly_breakdown <- scores %>% group_by(model) %>% summarise(
model = model,
One_week_Cov = mean(coverage.95[target == "1 wk ahead inc flu hosp"])*100,
Two_week_Cov = mean(coverage.95[target == "2 wk ahead inc flu hosp"])*100,
Three_week_Cov = mean(coverage.95[target == "3 wk ahead inc flu hosp"])*100,
Four_week_Cov = mean(coverage.95[target == "4 wk ahead inc flu hosp"])*100
) %>% unique()
View(weekly_breakdown)
View(scores)
View(coverage95)
View(coverage95_states)
View(weekly_breakdown)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95))
View(coverage95_states_horizon)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
View(coverage95_states_horizon)
View(coverage95_states_horizon)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage.95[target == "1 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage.95[target == "2 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage.95[target == "3 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage.95[target == "4 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(coverage95_states_horizon)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage.95[target == "1 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage.95[target == "2 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage.95[target == "3 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage.95[target == "4 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(cov95_breakdown)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Cov = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(cov95_breakdown)
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable1.pdf"), zoom = .5)
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 3: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable3.pdf"), zoom = .5)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Percent_above_90 = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Percent_above_90 = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Percent_above_90 = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Percent_above_90 = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 3: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable3.pdf"), zoom = .5)
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
