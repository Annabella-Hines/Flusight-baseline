target==cast_target[1]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_1
Prob.Increase_1
Prob.Increase_2 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[2]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_2 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[2]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_4
change <-
data.frame(Locations,Prob.Increase_1,Prob.Decrease_1,Prob.Increase_2,Prob.Decrease_2,Prob.Increase_3,Prob.Decrease_3,Prob.Increase_4,Prob.Decrease_4,
num_horizons.wk.point.change =
map_dbl(.x = Locations,
.f = function(.x){
last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
val = last_obs$value[which(last_obs$location_name==.x)[1]]
df=filter(dat1, location_name==.x, target == cast_target[num_horizons])
return(df$quantile_0.5 - val)
})#,
# Last.obs.in1.wk.50.PI =
#   map_chr(.x = "Locations", .f = function(.x){
#     last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
#     val = last_obs$value[which(last_obs$location_name==.x)]
#     df=filter(dat1, location_name==.x, target == "4 wk inc flu hosp")#cast_target[num_horizons])
#     interval = seq(df$quantile_0.25, df$quantile_0.75,1)
#     if(!val %in% interval){return("No (flagged)")}
#     else {return("Yes")}
#   })
)
class(Prob.Decrease_1)
class(Prob.Decrease_2)
class(Prob.Decrease_4)
class(Prob.Increase_4)
Prob.Increase_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
substr(names(quantile),10,14)
names(quantile)
num_horizons <- 4
cast_target <-c(paste(1:num_horizons, "wk inc flu hosp"))
cast_target <-c(paste(1:num_horizons, "wk ahead inc flu hosp"))
Prob.Increase_1 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[1]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_1 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[1]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_2 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[2]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.deaths)]),digits=3),0)
#prob=ifelse(is.na(prob),0,prob)
#prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(dat1,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(dat1)[grep("quantile_",names(dat1))]) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile),10,14))[which((quantile)<observed.deaths)]),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
change <-
data.frame(Locations,Prob.Increase_1,Prob.Decrease_1,Prob.Increase_2,Prob.Decrease_2,Prob.Increase_3,Prob.Decrease_3,Prob.Increase_4,Prob.Decrease_4,
num_horizons.wk.point.change =
map_dbl(.x = Locations,
.f = function(.x){
last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
val = last_obs$value[which(last_obs$location_name==.x)[1]]
df=filter(dat1, location_name==.x, target == cast_target[num_horizons])
return(df$quantile_0.5 - val)
})#,
# Last.obs.in1.wk.50.PI =
#   map_chr(.x = "Locations", .f = function(.x){
#     last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
#     val = last_obs$value[which(last_obs$location_name==.x)]
#     df=filter(dat1, location_name==.x, target == "4 wk inc flu hosp")#cast_target[num_horizons])
#     interval = seq(df$quantile_0.25, df$quantile_0.75,1)
#     if(!val %in% interval){return("No (flagged)")}
#     else {return("Yes")}
#   })
)
change[is.na(change)] <- 0
change <- change %>%
mutate(Classification =ifelse(Prob.Decrease_4 >=0.75, #& abs(num_horizons.wk.point.change)>10,
"Decrease",NA),
Classification = ifelse((Prob.Increase_4<0.75 & Prob.Decrease_4 < 0.75),
"Uncertain", Classification),
#Classification = ifelse((Prob.Increase_4>=0.75 | Prob.Decrease_4 >= 0.75),# & abs(num_horizons.wk.point.change)<= 10,
#                      "Uncertain", Classification), #paste0("Uncertain (reclassified, ", num_horizons, "-wk point change <= 10)"), Classification),
Classification = ifelse(Prob.Increase_4>=0.75, #& abs(num_horizons.wk.point.change)>10,
"Increase", Classification)) %>%
arrange(desc(Prob.Increase_4))
change.dat1 <- change
change.dat1$Classification_color <- ifelse(change.dat1$Classification == "Uncertain", "#444444", ifelse(change.dat1$Classification == "Increase", "#D55E00",
ifelse(change.dat1$Classification == "Decrease", "#0072B2", NA)))
View(change.dat1)
usstat <- read_sf("usstateandterr.shp")
usstat <- read_sf("usstateandterr.shp")
#change.dat <- merge(usstat, change.dat1[,c(1:5, 8:10)], by.y = "location_name", by.x = "NAME")
change.dat <- merge(usstat, change.dat1, by.y = "location_name", by.x = "NAME")
View(usstat)
View(change.dat1)
View(dat1)
View(dat1)
View(change)
change <-
data.frame(Locations,Prob.Increase_1,Prob.Decrease_1,Prob.Increase_2,Prob.Decrease_2,Prob.Increase_3,Prob.Decrease_3,Prob.Increase_4,Prob.Decrease_4,
num_horizons.wk.point.change =
map_dbl(.x = Locations,
.f = function(.x){
last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
val = last_obs$value[which(last_obs$location_name==.x)[1]]
df=filter(dat1, location_name==.x, target == cast_target[num_horizons])
return(df$quantile_0.5 - val)
})#,
names(change)
#change.dat <- merge(usstat, change.dat1[,c(1:5, 8:10)], by.y = "location_name", by.x = "NAME")
change.dat <- merge(usstat, change.dat1, by.y = "Locations", by.x = "NAME")
#change.mets1 <- change.dat1[, c(1:3, 8:10)]
change.mets1 <- change.dat1
#change.mets <- change.mets1 %>%
#  pivot_longer(cols = c(-location_name), names_to = "Probability") %>%
#  pivot_wider(names_from = c(location_name))
#forcts <- all.dat %>%
#  filter(target_end_date == max(target_end_date)) %>%
#  filter(model == "Ensemble")
forcts <- dat1
View(change.dat)
View(change.dat1)
View(change.dat1)
View(change)
View(change)
View(obs_data1)
View(obs_data1)
View(forecast_data)
display_targets
fcasts <- filter(forecast_data, location_name == jur, model != ensemble_for_display,
target_end_date %in% display_targets)
View(forecast_data)
View(forecast_data)
forecast_data <- load_forecasts_repo(
file_path = paste0(flusight_path, "/data-forecasts/"),
models = models,
targets = c(paste(1:4, "wk ahead inc flu hosp")),
forecast_dates = forecast_date,
hub = "FluSight",
types = "quantile")%>%
rename(full_location_name = location_name) %>%
mutate(full_location_name = case_when(location == "US" ~ "United States",
location != "US" ~ full_location_name))
forecast_data$target <- paste(forecast_data$horizon, forecast_data$temporal_resolution, forecast_data$target_variable, sep = " ")
View(forecast_data)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_"))
View(forecast_data1)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
rename(full_location_name, location_name)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
rename(location_name, full_location_name)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
rename(full_location_name = location_name)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(full_location_name = location_name)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(location_name = full_location_name)
View(forecast_data1)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(location_name = full_location_name) %>%
dplyr::select(target, target_end_date, forecast_date, model, location_name, c(12:35)) %>%
group_by(target, target_end_date, forecast_date, model, location_name) %>%
summarise_all(sum, na.rm = T)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(location_name = full_location_name) %>%
dplyr::select(target, target_end_date, forecast_date, model, location_name, c(12:35)) %>%
group_by(target, target_end_date, forecast_date, model, location_name)
forecast_data <- load_forecasts_repo(
file_path = paste0(flusight_path, "/data-forecasts/"),
models = models,
targets = c(paste(1:4, "wk ahead inc flu hosp")),
forecast_dates = forecast_date,
hub = "FluSight",
types = "quantile")%>%
rename(full_location_name = location_name) %>%
mutate(full_location_name = case_when(location == "US" ~ "United States",
location != "US" ~ full_location_name))
forecast_data$target <- paste(forecast_data$horizon, forecast_data$temporal_resolution, forecast_data$target_variable, sep = " ")
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(location_name = full_location_name) %>%
dplyr::select(target, target_end_date, forecast_date, model, location_name, c(12:35)) %>%
group_by(target, target_end_date, forecast_date, model, location_name) %>%
summarise_all(sum, na.rm = T)
forecast_data1 <- forecast_data %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, model, sep = "_")) %>%
dplyr::rename(location_name = full_location_name) %>%
dplyr::select(target, target_end_date, forecast_date, model, location_name, c(12:34)) %>%
group_by(target, target_end_date, forecast_date, model, location_name) %>%
summarise_all(sum, na.rm = T)
forecast_data1$location_name <- ifelse(dat1$location_name == "United States", "National", dat1$location_name)
forecast_data1$location_name <- ifelse(forecast_data1$location_name == "United States", "National", forecast_data1$location_name)
View(forecast_data1)
