as.character()
eval.weeks = 8
weeks.to.eval =
seq((last.tuesday+4)- 7*(eval.weeks-1) - 7*(max(window.width)-1),
last.tuesday+4,
by=7) %>%
as.character()
CDCid="rpe5" #"ppf6"#"oko8"
#ncov19hub <- paste0("C:/Users/",CDCid,"/OneDrive - CDC/Projects/nCov-2019/Forecast visualization/")
#hubpath = paste0("C:/Users/",CDCid,"/OneDrive - CDC/Projects/covid19-forecast-hub")
hubpath <-"C:/Users/rpe5/Desktop/GitHub/covid19-forecast-hub"
ncov19hub <-"C:/Users/rpe5/Desktop/GitHub/nCov-2019/Forecast visualization/"
source(paste0(hubpath,"/code/processing-fxns/get_next_saturday.R"))
get_next_tuesday <- function(date) {
require(lubridate)
date <- as.Date(date)
## calculate days until saturday (day 7)
diff = ifelse(wday(date) <= (3), 3-wday(date), 3+7-wday(date))
## add to given date
new_date <- diff + date
return(new_date)
}
select = dplyr::select
filter = dplyr::filter
models_to_exclude <-c("CU-nointerv", "CU-80contact1x10p", "CU-80contact1x5p", "CU-80contactw10p", "CU-80contactw5p",
"UChicago-CovidIL_100", "UChicago-CovidIL_30_increase",
"Imperial-ensemble1",
"CU-high", "CU-low","CU-mid","CU-nochange", "CU-scenario_high", "CU-scenario_low", "CU-scenario_mid",
"COVIDhub-ensemble", "COVIDhub_CDC-ensemble")
datapath <- paste0(hubpath,"/data-processed")
filenames = list.files(path=datapath, pattern=".csv",
full.names = TRUE, recursive = TRUE)
filenames = list.files(path=datapath, pattern=".csv",
full.names = TRUE, recursive = TRUE)
unique_model_names <- unique(str_split(filenames, "/", simplify = TRUE)[, 8:9])
unique_model_names = cbind(unique_model_names, substr(unique_model_names[,2],1,10) )
unique_model_names = cbind(unique_model_names, substr(unique_model_names[,2],1,10) )
unique_model_names = data.frame(model = as.character(unique_model_names[,1]),
filename = as.character(unique_model_names[,2]),
date.submitted = unique_model_names[,3],
next.tuesday = get_next_tuesday(as.Date(unique_model_names[,3]))) %>%
group_by(model, next.tuesday) %>%
summarise(filename = as.character(filename[which.max(as.Date(date.submitted))])) %>%
ungroup() %>%
mutate(model = as.character(model),
next.tuesday = as.character(next.tuesday)) %>%
filter(next.tuesday %in%
as.character(
last.tuesday - 7*(0:((eval.weeks-1)+max(window.width)+(4-1)-1))
)
) %>%
filter(next.tuesday == as.character(last.tuesday))
filenames =
paste0(hubpath,"/data-processed/",
unique_model_names$model, "/",
unique_model_names$filename)
dat_list <- lapply(filenames,
FUN = function(x){
read_csv(x, col_types = cols(.default = "c")) %>%
filter(grepl("death", target),
target %in% c(#paste(1:4,"wk ahead cum death"),
paste(1:4,"wk ahead inc death"))#,
#target_end_date == as.character(last.tuesday+4)
)
}
)
dat_list <- lapply(filenames,
FUN = function(x){
read_csv(x, col_types = cols(.default = "c")) %>%
filter(grepl("death", target),
target %in% c(#paste(1:4,"wk ahead cum death"),
paste(1:4,"wk ahead inc death"))#,
#target_end_date == as.character(last.tuesday+4)
)
}
)
models = unique_model_names$model
unique_models = unique(models)
## load in all files sequentially
all_dat_new <- tibble()
for (i in c(1:length(dat_list))) {
all_dat_new <- bind_rows(all_dat_new,
dat_list[[i]] %>%
select(location, target, target_end_date, forecast_date,
type, quantile, value) %>%
mutate(
location = as.character(location),
location =
as.character(ifelse(location %in% as.character(1:9),
paste0("0",location),location)),
model = models[i],
value = as.numeric(value),
quantile = as.numeric(quantile)  ,
quantile=ifelse(quantile=="NaN", NA, quantile)
)
)
}
all_dat_new <-all_dat_new %>%
filter(!(model %in% models_to_exclude))
# load old data
week.to.drop = as.character(last.tuesday-7*((eval.weeks-1)+max(window.width)+(4-1)-1))
load(paste0(ncov19hub,"WIS eval datasets/death_WIS_EW",52,".Rdata"))
all_dat =
rbind(all_dat_new,
all_dat
#filter(all_dat, target_end_date %in% weeks.to.eval)
)
## get truth data
obs_data <- read_csv(paste0(hubpath,"/data-truth/truth-Cumulative Deaths.csv")) %>%
mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
location_name = ifelse(location == 'US', 'National', location_name)) %>%
select(-date) %>%
filter(wk_end_date %in% as.Date(unique(all_dat$target_end_date) ))
## get truth data
obs_data <- read_csv(paste0(hubpath,"/data-truth/truth-Cumulative Deaths.csv")) %>%
mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
location_name = ifelse(location == 'US', 'National', location_name)) %>%
select(-date) %>%
filter(wk_end_date %in% as.Date(unique(all_dat$target_end_date) ))
obs_data_inc <- read_csv(paste0(hubpath,"/data-truth/truth-Incident Deaths.csv")) %>%
mutate(wk_end_date = get_next_saturday(as.Date(date, "%m/%d/%y")),
location_name = ifelse(location == 'US', 'National', location_name)) %>%
group_by(location, location_name,wk_end_date) %>%
summarize(value_daily2 = sum(value)) %>%
ungroup() %>%
filter(wk_end_date %in% as.Date(unique(all_dat$target_end_date)))
obs_data_inc <- read_csv(paste0(hubpath,"/data-truth/truth-Incident Deaths.csv"))
memory.limit(size = 50000)
obs_data_inc <- read_csv(paste0(hubpath,"/data-truth/truth-Incident Deaths.csv"))
inclusion_dates <- as.Date("2022-01-10") - 0:6 #Update for last week's forecast date (Monday)
inclusion_dates[1])$MMWRweek-2
inclusion_dates[1]
paste0(ncov19path, "WIS eval datasets/hosps_WIS_2022_EW", MMWRweek(inclusion_dates[1])$MMWRweek-2,".Rdata")
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
reference_date
forecast_date
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
setwd("C:/Users/rpe5/Desktop/GitHub/Flusight-baseline")
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
