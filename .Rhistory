labels = length(unique(Weekly.WIS$models)):1,
las=1)
}
else
{
Weekly.WIS.NonEnsemble %>%
filter(models == i) %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(Target_Date, rank) %>%
lines(type="b", pch = 16)
}
FinalWeek.WIS =
filter(Weekly.WIS,
Target_Date == max(as.Date(Target_Date))) %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(rank, models)
axis(side = 4,
at = FinalWeek.WIS$rank,
labels = FinalWeek.WIS$models,
las=1)
}
Weekly.WIS.Ensemble %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(Target_Date, rank) %>%
lines(type="b", pch = 16, col = "red", cex = 1.5)
par(mfrow=c(2,2))
# Absolute WIS
inc.rankings_last.4.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `Absolute WIS`)  %>%
plot(las=1, main = "Pairwise vs Absolute WIS",pch=16)
inc.rankings_last.4.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `Absolute WIS`)  %>%
points(col = "red", pch = 16, cex = 1.5)
# MAE
inc.rankings_last.4.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, MAE)  %>%
plot(las=1, main = "Pairwise WIS vs MAE",pch=16)
inc.rankings_last.4.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, MAE)  %>%
points(col = "red", pch = 16, cex = 1.5)
# 50% coverage
inc.rankings_last.4.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `50% Coverage (%)`)  %>%
plot(las=1, main = "Pairwise WIS vs 50% Coverage",pch=16)
inc.rankings_last.4.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `50% Coverage (%)`)  %>%
points(col = "red", pch = 16, cex = 1.5)
# 95% coverage
inc.rankings_last.4.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `95% Coverage (%)`)  %>%
plot(las=1, main = "Pairwise WIS vs 95% Coverage",pch=16)
inc.rankings_last.4.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `95% Coverage (%)`)  %>%
points(col = "red", pch = 16, cex = 1.5)
inc.rankings_last.4.weeks %>%
select(Model,  `% of Forecasts Submitted`,
`% of Locations Forecasted`,
`% of Locations Fully Forecasted`,
`% of Submitted Locations with All Forecasts`
) %>%
datatable()
options(dplyr.summarise.inform = FALSE)
WIS_last8weeks =
left_join(WIS_last8weeks,
locations_fully_forecasted(WIS_last8weeks),
by = "model") %>%
#filter(locations.fully.forecasted >= 50) %>%
select(-locations.fully.forecasted)
inc.rankings_last.8.weeks =
make_WIS_ranking(WIS_last8weeks) %>%
select(-rank) %>%
# filter(frac.locations.fully.forecasted >= 50/length(unique(WIS_last8weeks$location_name))) %>%
mutate(models = model_display_names[as.character(models)],
mean.WIS = round(mean.WIS,2),
rel.WIS.skill = round(rel.WIS.skill,2),
MAE = round(MAE,2),
frac.forecasts.submitted =
round(100*frac.forecasts.submitted),
frac.locations.submitted =
round(100*frac.locations.submitted),
frac.locations.fully.forecasted =
round(100*frac.locations.fully.forecasted),
frac.submitted.locations.fully.forecasted =
round(100*frac.submitted.locations.fully.forecasted)) %>%
rename(Model = models,
`Absolute WIS` = mean.WIS,
`Pairwise WIS`= rel.WIS.skill,
`50% Coverage (%)` = Percent.Cov.50,
`95% Coverage (%)` = Percent.Cov.95,
`% of Forecasts Submitted`  = frac.forecasts.submitted,
`% of Locations Forecasted` = frac.locations.submitted,
`% of Locations Fully Forecasted` = frac.locations.fully.forecasted,
`% of Submitted Locations with All Forecasts` = frac.submitted.locations.fully.forecasted)
inc.rankings_last.8.weeks %>%
select(Model, `Absolute WIS`, `Pairwise WIS`,
MAE, `50% Coverage (%)`,
`95% Coverage (%)`,
`% of Forecasts Submitted`) %>%
datatable()
par(mar=c(3,4,3,1))
Weekly.WIS = data.frame()
for(i in as.character(unique(WIS_last8weeks$target_end_date)))
{
Weekly.WIS=
WIS_last8weeks %>%
filter(#model_display_names[as.character(model)] %in% unique(inc.rankings_last.8.weeks$Model),
target_end_date == i) %>%
make_WIS_ranking() %>%
mutate(models = model_display_names[as.character(models)],
Target_Date = i,
EpiWeek = paste0("EW",MMWRweek(i)$MMWRweek),
Quantile = (max(rank)-rank+1)/max(rank)) %>%
filter(models %in%
unique(inc.rankings_last.8.weeks$Model)) %>%
mutate(rank = rank(rel.WIS.skill)) %>%
rbind(Weekly.WIS)
}
Weekly.WIS =
Weekly.WIS %>%
mutate(Target_Date = as.Date(Target_Date)) %>%
arrange(Target_Date)
Weekly.WIS.NonEnsemble =
filter(Weekly.WIS, models!="Flusight-ensemble")
Weekly.WIS.Ensemble =
filter(Weekly.WIS, models=="Flusight-ensemble")
for(i in unique(Weekly.WIS.NonEnsemble$models))
{
if(i == unique(Weekly.WIS.NonEnsemble$models)[1])
{
Weekly.WIS.NonEnsemble %>%
filter(models == i) %>%
select(Target_Date, rel.WIS.skill) %>%
plot(type="b", pch = 16, ylim =
c(min(Weekly.WIS$rel.WIS.skill),
max(Weekly.WIS$rel.WIS.skill)),
las=1,
xlab = "Epi-Week Forecasted",
ylab = "Pairwise WIS", xaxt="n")
axis(side = 1,
at = Weekly.WIS.Ensemble$Target_Date,
labels = Weekly.WIS.Ensemble$EpiWeek)
}
else
{
Weekly.WIS.NonEnsemble %>%
filter(models == i) %>%
select(Target_Date, rel.WIS.skill) %>%
lines(type="b", pch = 16)
}
}
Weekly.WIS.Ensemble %>%
select(Target_Date, rel.WIS.skill) %>%
lines(type="b", pch = 16, col = "red", cex = 1.5)
legend("topleft",
legend =
c("Ensemble",
"Individual Models"),
fill = c("red", "black"))
par(mar=c(3,4,3,7))
for(i in unique(Weekly.WIS.NonEnsemble$models))
{
if(i == unique(Weekly.WIS.NonEnsemble$models)[1])
{
Weekly.WIS.NonEnsemble %>%
filter(models == i) %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(Target_Date, rank) %>%
plot(type="b", pch = 16,
ylim =
c(1,1*length(unique(Weekly.WIS$models))),
las=1,
xlab = "Epi-Week Forecasted",
ylab = "Model Ranking (Pairwise WIS)",
xaxt="n", yaxt="n")
axis(side = 1,
at = Weekly.WIS.Ensemble$Target_Date,
labels = Weekly.WIS.Ensemble$EpiWeek)
axis(side =2,
at = 1:length(unique(Weekly.WIS$models)),
labels = length(unique(Weekly.WIS$models)):1,
las=1)
}
else
{
Weekly.WIS.NonEnsemble %>%
filter(models == i) %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(Target_Date, rank) %>%
lines(type="b", pch = 16, col="black")
}
FinalWeek.WIS =
filter(Weekly.WIS,
Target_Date == max(as.Date(Target_Date))) %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(rank, models)
axis(side = 4,
at = FinalWeek.WIS$rank,
labels = FinalWeek.WIS$models,
las=1)
}
Weekly.WIS.Ensemble %>%
mutate(rank = length(unique(Weekly.WIS$models)) + 1 -rank) %>%
select(Target_Date, rank) %>%
lines(type="b", pch = 16, col = "red", cex = 1.5)
par(mfrow=c(2,2))
# Absolute WIS
inc.rankings_last.8.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `Absolute WIS`)  %>%
plot(las=1, main = "Pairwise vs Absolute WIS",pch=16)
inc.rankings_last.8.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `Absolute WIS`)  %>%
points(col = "red", pch = 16, cex = 1.5)
# MAE
inc.rankings_last.8.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, MAE)  %>%
plot(las=1, main = "Pairwise WIS vs MAE",pch=16)
inc.rankings_last.8.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, MAE)  %>%
points(col = "red", pch = 16, cex = 1.5)
# 50% coverage
inc.rankings_last.8.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `50% Coverage (%)`)  %>%
plot(las=1, main = "Pairwise WIS vs 50% Coverage",pch=16)
inc.rankings_last.8.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `50% Coverage (%)`)  %>%
points(col = "red", pch = 16, cex = 1.5)
# 95% coverage
inc.rankings_last.8.weeks %>%
#filter(Model != "Ensemble") %>%
select(`Pairwise WIS`, `95% Coverage (%)`)  %>%
plot(las=1, main = "Pairwise WIS vs 95% Coverage",pch=16)
inc.rankings_last.8.weeks %>%
filter(Model == "Flusight-ensemble") %>%
select(`Pairwise WIS`, `95% Coverage (%)`)  %>%
points(col = "red", pch = 16, cex = 1.5)
inc.rankings_last.8.weeks %>%
select(Model,  `% of Forecasts Submitted`,
`% of Locations Forecasted`,
`% of Locations Fully Forecasted`,
`% of Submitted Locations with All Forecasts`
) %>%
datatable()
options(dplyr.summarise.inform = FALSE)
library(MMWRweek)
observed.weeks =
c(as.character(
sort(last.tuesday+4 - 7*(0:((eval.weeks-1)+max(window.width)-1)))
))
observed.weeks
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
setwd("C:/Users/rpe5/Desktop/GitHub/Flusight-baseline")
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
