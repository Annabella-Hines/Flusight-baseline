location_name==.x,
target==cast_target[1]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)<observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_2 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[2]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)>observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_2 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[2]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)<observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)>observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_3 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[3]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)<observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Increase_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
# prob =  round(1-min(as.numeric(substr(names(quantile),10,14))[which((quantile)>observed.cases)]),digits=3)
prob =  max(round(1-min(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)>observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,NA,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
Prob.Decrease_4 = map_dbl(.x=Locations, .f = function(.x){
observed.deaths=
filter(obs_data1,
location_name==.x) %>%
arrange(wk_end_date) %>%
tail(1) %>%
dplyr::select(value) %>% unlist()
quantile= filter(prob.dat,
# model== ensemble_for_display ,
location_name==.x,
target==cast_target[4]) %>%
dplyr::select(names(prob.dat)[grep("quantile_",names(prob.dat))], target) %>%
unlist()
prob =  max(round(max(as.numeric(substr(names(quantile[2:23]),10,14))[which(as.numeric(quantile)<observed.deaths)], na.rm = T),digits=3),0)
prob=ifelse(is.na(prob),0,prob)
prob=ifelse(observed.deaths==0,0,prob)
prob=ifelse(observed.deaths<0,NA,prob)
return(prob)
})
change <-
data.frame(Locations,Prob.Increase_1,Prob.Decrease_1,Prob.Increase_2,Prob.Decrease_2,Prob.Increase_3,Prob.Decrease_3,Prob.Increase_4,Prob.Decrease_4,
num_horizons.wk.point.change =
map_dbl(.x = Locations,
.f = function(.x){
last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
val = last_obs$value[which(last_obs$location_name==.x)[1]]
df=filter(dat1, location_name==.x, target == cast_target[num_horizons])
return(df$quantile_0.5 - val)
})#,
# Last.obs.in1.wk.50.PI =
#   map_chr(.x = "Locations", .f = function(.x){
#     last_obs = filter(obs_data1, wk_end_date == max(wk_end_date)) %>% dplyr::select(location_name, value)
#     val = last_obs$value[which(last_obs$location_name==.x)]
#     df=filter(dat1, location_name==.x, target == "4 wk inc flu hosp")#cast_target[num_horizons])
#     interval = seq(df$quantile_0.25, df$quantile_0.75,1)
#     if(!val %in% interval){return("No (flagged)")}
#     else {return("Yes")}
#   })
)
change[is.na(change)] <- 0
change <- change %>%
mutate(Classification =ifelse(Prob.Decrease_4 >=0.75, #& abs(num_horizons.wk.point.change)>10,
"Decrease",NA),
Classification = ifelse((Prob.Increase_4<0.75 & Prob.Decrease_4 < 0.75),
"Uncertain", Classification),
#Classification = ifelse((Prob.Increase_4>=0.75 | Prob.Decrease_4 >= 0.75),# & abs(num_horizons.wk.point.change)<= 10,
#                      "Uncertain", Classification), #paste0("Uncertain (reclassified, ", num_horizons, "-wk point change <= 10)"), Classification),
Classification = ifelse(Prob.Increase_4>=0.75, #& abs(num_horizons.wk.point.change)>10,
"Increase", Classification)) %>%
arrange(desc(Prob.Increase_4))
change.dat1 <- change
change.dat1$Classification_color <- ifelse(change.dat1$Classification == "Uncertain", "#444444", ifelse(change.dat1$Classification == "Increase", "#D55E00",
ifelse(change.dat1$Classification == "Decrease", "#0072B2", NA)))
#change.dat1 <- change.dat1[-c(54),]
#change.dat1$target_end_date <- as.POSIXct("2021-11-12", format = "%Y-%m-%d")
#usstat <- readRDS("C:/Users/rpe5/COVIDashboard stuff/usgeo.RDS")
usstat <- read_sf("usstateandterr.shp")
#usstat <- tigris::states(class = "sf")
#change.dat <- merge(usstat, change.dat1[,c(1:5, 8:10)], by.y = "location_name", by.x = "NAME")
change.dat <- merge(usstat, change.dat1, by.y = "Locations", by.x = "NAME")
#change.dat <- change.dat[-c(2),]
#change.dat$NAME
#change.mets1 <- change.dat1[, c(1:3, 8:10)]
change.mets1 <- change.dat1
change.mets1$location_name <- change.mets1$Locations
#change.mets <- change.mets1 %>%
#  pivot_longer(cols = c(-location_name), names_to = "Probability") %>%
#  pivot_wider(names_from = c(location_name))
#forcts <- all.dat %>%
#  filter(target_end_date == max(target_end_date)) %>%
#  filter(model == "Ensemble")
forcts <- dat1
Ens <- dat1
#Ens <- all.dat %>%
#  filter(model == "Ensemble")
#mods <- read_csv(paste0(rundate, "-all-hospitalizations-model-data.csv")) %>%
#  filter(model!="Ensemble") %>%
#  pull(model) %>%
#  unique
#obs_data <- read.csv(paste0(shpt, max(inclusion_dates),"/Other output/", max(inclusion_dates), "-", "reported-hosps-data.csv"))
ensemble_for_display <- "FluSight-Ensemble"
display_targets <- cast_target
display_dates <- c(as.Date(forecast_date) - seq(1, 25))
all_mod_dat <- as.data.frame(rbind(dat1, forecast_data1)) %>% dplyr::select(target, target_end_date, forecast_date, model, location_name, quantile_0.025, quantile_0.25, quantile_0.5, quantile_0.75, quantile_0.975)
source("C:/Users/rpe5/COVIDashboard stuff/Weekly Data/Model names and colors.R")
#source(paste0(ncov19path, "Plotting functions.R"))
#source("Dashboard Functions.R")
forcts_national <- forcts %>% filter(location_name == "National") %>% dplyr::select(target, target_end_date, forecast_date, model, location_name, quantile_0.025, quantile_0.25, quantile_0.5, quantile_0.75, quantile_0.975) %>% as.data.frame()
modelnames <- unique(forecast_data$model)
mandtnames <- as.data.frame(cbind(modelnames, teamnames))
mandtnames %>% knitr::kable(col.names = c("Model Name", "Team Name"), row.names = F)
teamnames <- model_team_names[modelnames]
mandtnames <- as.data.frame(cbind(modelnames, teamnames))
mandtnames %>% knitr::kable(col.names = c("Model Name", "Team Name"), row.names = F)
filedirec <- paste0("C:/Users/",userid,"/COVIDashboard stuff/")
recent_subs <- as.Date(as.Date(forecast_date) - c(0, 7, 7*2, 7*3, 7*4, 7*5)) #5 weeks of most recent submitted forecasts, where last week's forecast=0, + this week's forecast
### Change indicators
change.meds <- change %>% rename(location_name = Locations)
## Plots
## set colors
#source(paste0(ncov19path, "Plotting functions.R"))
#source(paste0(ncov19path, "Model names and colors.R"))
source("C:/Users/rpe5/COVIDashboard stuff/Weekly Data/Model names and colors.R")
#N
options(scipen=5)
## Rename locations based on change metrics
decrease <-change.meds[which(change.meds$Classification=="Decrease"),]
decrease.plot <-as.vector(decrease$location_name)
increase <-change.meds[which(change.meds$Classification=="Increase"),]
increase.plot <-as.vector(increase$location_name)
flagged <-change.meds %>%
mutate(Classification =ifelse(Prob.Decrease_4 >=0.9,"Decrease",NA),
Classification = ifelse(Prob.Decrease_4>=0.75 & Prob.Decrease_4 <0.9, "Decrease", Classification),
Classification = ifelse(Prob.Increase_4<0.75 & Prob.Decrease_4 <0.75,"Uncertain", Classification),
Classification = ifelse(Prob.Increase_4>=0.75 & Prob.Increase_4 <0.9,"Increase", Classification),
Classification = ifelse(Prob.Increase_4 >=0.9,"Increase", Classification)
) %>%
filter(Classification!="Uncertain") %>%
mutate(location_name=ifelse(location_name %in% decrease$location_name, paste0(location_name,"*", sep=""), location_name),
location_name=ifelse(location_name %in% increase$location_name, paste0(location_name,"**", sep=""), location_name))
flagged <-as.vector(flagged$location_name)
plot_retro_flu <- function(modelname) {
pdf(paste0(filedirec,"Retro Plots/",
"Hospital_Flu_Forecast_Retrospective_Plots_",modelname,"_", forecast_date,".pdf"),
width=11, height=7.5, paper='USr')
par(mfrow=c(2, 3),
mar=c(1.5, 2, 2, 2.5), oma=c(3, 2, 2, 2),
mgp=c(0.5, 0.3, 0), tck=-0.01)
for (i in 1:length(all_locations)) {
this_location <-all_locations[i]
first = 1
for(j in 1:length(submission_date))
{
this_submission_date = submission_date[j]
fcasts <- filter(dat.plot,
#model=="FluSight-Ensemble",
location_name == this_location,
forecast_date == this_submission_date)
obs <- filter(obs_data,
location_name == this_location,
date %in%
seq(
min(obs_data$date),
max(c(max(obs_data$date),
max(as.Date(fcasts$target_end_date))), na.rm =T),
1)) # 7))
if(nrow(obs) == 0) {
print(this_location)
next
}
if(nrow(fcasts) == 0) {
print(this_location)
next
}
print(this_location)
plot(dplyr::select(obs, date, report),
xlim=c(as.Date("2021-10-01"), max(as.Date(dat.plot$target_end_date))),#c(min(obs$date), max(as.Date(dat.plot$target_end_date))),
ylim = c(0, max(obs$report,
filter(dat.plot,
location_name == this_location,
target_end_date == max(dat.plot$target_end_date))$quantile_0.975,
na.rm=T)),
type='n',
#pch=16, col='black',
axes=F, xlab='', ylab='Weekly incident hospitalizations', cex=0.50,
main = paste0("Forecast Submitted ", this_submission_date))
if(first == 1)
{
mtext(#this_location, 3, 1.5, adj=0, font=2, cex=1.5)
ifelse(this_location %in% flagged,
paste(this_location, "(difference flag & predicated change)"), this_location),
3, 1.5, adj=0, font=2, cex=1.5)
first = 0
}
add_x_grid(c(obs$date, as.Date(dat.plot$target_end_date)))
add_y_grid(y = c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975),this_n = 100)
# add_y_grid(c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975))
add_x_axis(c(obs$date, max(obs$date) + seq(7,7*4,7)))
add_y_axis(y = c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975),this_n = 100)
# add_y_axis(c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975))
lines(obs %>% dplyr::select(date, report) %>%
filter(date < Sys.Date()-7))
points(obs %>% dplyr::select(date, report) %>%
filter(date < Sys.Date()-7),
col="black", pch=16, cex=1.3)
points(obs %>% dplyr::select(date, report) %>%
filter(date > Sys.Date()-7),
col=adjustcolor("black", 0.45), pch=16)
for (this_model in unique(fcasts$model)) {
lines(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.5),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.50))#model_colors[this_model], 0.50))
points(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.5),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.50), pch=16)
plot_bands(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.25, quantile_0.75),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.35), border=NA)
plot_bands(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.025, quantile_0.975),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.25), border=NA)
}
abline(v=this_submission_date, lwd=1.5, lty=2)
legend('topleft',
legend=c("Reported", unique(fcasts$model)),
fill=c("black", ifelse(fcasts$model[1]=="Flusight-ensemble", "red", "blue")),
ncol=ifelse(length(unique(fcasts$model))>6,2,1),
border=NA,
bty='n', cex=0.75)
legend('bottomright',
legend="Inner Bands: 50% Prediction Intervals\nOuter Bands: 95% Prediction Intervals",
cex=0.75, border=NA,
bty='n')
if (this_location %in% decrease.plot) {
mtext("*New weekly confirmed flu hospital admissions may decrease in this location over the next four weeks. For these locations, the ensemble forecast indicates a median daily probability \nof 0.75 or greater that fewer hospital admissions will be reported in the last seven days of the forecast than the median in the last seven days of reported data.",
1, 2, adj=0, outer=T, cex=0.65)}
if (this_location %in% increase.plot) {
mtext("**New weekly confirmed flu hospital admissions may increase in this location over the next four weeks. For these locations, the ensemble forecast indicates a median daily probability \nof 0.75 or greater that more hospital admissions will be reported in the last seven days of the forecast than the median in the last seven days of reported data.",
1, 2, adj=0, outer=T, cex=0.65)}
}
while(!par('page')) plot.new()
}
dev.off()
}
modelnames <- c(modelnames, "Flusight-ensemble", "Flusight-baseline")
for (i in 1:length(modelnames)){
model_name <- modelnames[i]
#all_dat <- rd_in_ensemble()
all_dat <- rd_in_model(model_name)
all_dat <-all_dat %>%
left_join(., location_names, by="location") %>%
mutate(location_name = ifelse(location == 'US', 'National', location_name)) %>%
mutate(model=model_name) %>%
dplyr::select(-location)
all_dat <- unique(all_dat)
dat.plot <- all_dat %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value) %>%
#rename(point = point_NA) %>%
filter(forecast_date >= recent_subs[5]) %>%
arrange(target_end_date, location_name)
submission_date <-unique(as.Date(dat.plot$forecast_date))
dat.plot <- dat.plot %>%
mutate(location_name=ifelse(location_name %in% decrease$location_name, paste0(location_name,"*", sep=""), location_name),
location_name=ifelse(location_name %in% increase$location_name, paste0(location_name,"**", sep=""), location_name)) %>% #,
arrange(target_end_date, location_name)
obs_data <- obs_data1 %>%
rename(date = wk_end_date, report = value) %>%
mutate(location_name=ifelse(location_name %in% decrease$location_name, paste0(location_name,"*", sep=""), location_name),
location_name=ifelse(location_name %in% increase$location_name, paste0(location_name,"**", sep=""), location_name)) %>% #,
arrange(date, location_name)
## Set up location vectors for labeling
all_locations <- c(grep("National", dat.plot$location_name, value = T)[1],
unique(dat.plot$location_name[dat.plot$location_name
!= grep("National", dat.plot$location_name, value = T)[1]])) #BE SURE TO UPDATE 'NATIONAL' BASED on CLASSIFICATION
increase.plot <-grep("**", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot <-grep("*", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot <-decrease.plot[which(!decrease.plot %in% increase.plot)]
plot_retro_flu(model_name)
}
plot_retro_flu <- function(modelname) {
pdf(paste0(filedirec,"Retro Plots/",
"Hospital_Flu_Forecast_Retrospective_Plots_",modelname,"_", forecast_date,".pdf"),
width=11, height=7.5, paper='USr')
par(mfrow=c(2, 3),
mar=c(1.5, 2, 2, 2.5), oma=c(3, 2, 2, 2),
mgp=c(0.5, 0.3, 0), tck=-0.01)
for (i in 1:length(all_locations)) {
this_location <-all_locations[i]
first = 1
for(j in 1:length(submission_date))
{
this_submission_date = submission_date[j]
fcasts <- filter(dat.plot,
#model=="FluSight-Ensemble",
location_name == this_location,
forecast_date == this_submission_date)
obs <- filter(obs_data,
location_name == this_location,
date %in%
seq(
min(obs_data$date),
max(c(max(obs_data$date),
max(as.Date(fcasts$target_end_date))), na.rm =T),
1)) # 7))
if(nrow(obs) == 0) {
print(this_location)
next
}
if(nrow(fcasts) == 0) {
print(this_location)
next
}
print(this_location)
plot(dplyr::select(obs, date, report),
xlim=c(as.Date("2021-10-01"), max(as.Date(dat.plot$target_end_date))),#c(min(obs$date), max(as.Date(dat.plot$target_end_date))),
ylim = c(0, max(obs$report,
filter(dat.plot,
location_name == this_location,
target_end_date == max(dat.plot$target_end_date))$quantile_0.975,
na.rm=T)),
type='n',
#pch=16, col='black',
axes=F, xlab='', ylab='Weekly incident hospitalizations', cex=0.50,
main = paste0("Forecast Submitted ", this_submission_date))
if(first == 1)
{
mtext(#this_location, 3, 1.5, adj=0, font=2, cex=1.5)
ifelse(this_location %in% flagged,
paste(this_location, "(difference flag & predicated change)"), this_location),
3, 1.5, adj=0, font=2, cex=1.5)
first = 0
}
add_x_grid(c(obs$date, as.Date(dat.plot$target_end_date)))
add_y_grid(y = c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975),this_n = 100)
# add_y_grid(c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975))
add_x_axis(c(obs$date, max(obs$date) + seq(7,7*4,7)))
add_y_axis(y = c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975),this_n = 100)
# add_y_axis(c(0, 2*filter(dat.plot, location_name==this_location)$quantile_0.975))
lines(obs %>% dplyr::select(date, report) %>%
filter(date < Sys.Date()-7))
points(obs %>% dplyr::select(date, report) %>%
filter(date < Sys.Date()-7),
col="black", pch=16, cex=1.3)
points(obs %>% dplyr::select(date, report) %>%
filter(date > Sys.Date()-7),
col=adjustcolor("black", 0.45), pch=16)
for (this_model in unique(fcasts$model)) {
lines(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.5),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.50))#model_colors[this_model], 0.50))
points(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.5),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.50), pch=16)
plot_bands(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.25, quantile_0.75),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.35), border=NA)
plot_bands(filter(fcasts, model == this_model) %>%
dplyr::select(target_end_date, quantile_0.025, quantile_0.975),
col=adjustcolor(ifelse(this_model=="Flusight-ensemble", "red", "blue"), 0.25), border=NA)
}
abline(v=this_submission_date, lwd=1.5, lty=2)
legend('topleft',
legend=c("Reported", unique(fcasts$model)),
fill=c("black", ifelse(fcasts$model[1]=="Flusight-ensemble", "red", "blue")),
ncol=ifelse(length(unique(fcasts$model))>6,2,1),
border.col = NA,
bty='n', cex=0.75)
legend('bottomright',
legend="Inner Bands: 50% Prediction Intervals\nOuter Bands: 95% Prediction Intervals",
cex=0.75, border.col=NA,
bty='n')
if (this_location %in% decrease.plot) {
mtext("*New weekly confirmed flu hospital admissions may decrease in this location over the next four weeks. For these locations, the ensemble forecast indicates a median daily probability \nof 0.75 or greater that fewer hospital admissions will be reported in the last seven days of the forecast than the median in the last seven days of reported data.",
1, 2, adj=0, outer=T, cex=0.65)}
if (this_location %in% increase.plot) {
mtext("**New weekly confirmed flu hospital admissions may increase in this location over the next four weeks. For these locations, the ensemble forecast indicates a median daily probability \nof 0.75 or greater that more hospital admissions will be reported in the last seven days of the forecast than the median in the last seven days of reported data.",
1, 2, adj=0, outer=T, cex=0.65)}
}
while(!par('page')) plot.new()
}
dev.off()
}
for (i in 1:length(modelnames)){
model_name <- modelnames[i]
#all_dat <- rd_in_ensemble()
all_dat <- rd_in_model(model_name)
all_dat <-all_dat %>%
left_join(., location_names, by="location") %>%
mutate(location_name = ifelse(location == 'US', 'National', location_name)) %>%
mutate(model=model_name) %>%
dplyr::select(-location)
all_dat <- unique(all_dat)
dat.plot <- all_dat %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value) %>%
#rename(point = point_NA) %>%
filter(forecast_date >= recent_subs[5]) %>%
arrange(target_end_date, location_name)
submission_date <-unique(as.Date(dat.plot$forecast_date))
dat.plot <- dat.plot %>%
mutate(location_name=ifelse(location_name %in% decrease$location_name, paste0(location_name,"*", sep=""), location_name),
location_name=ifelse(location_name %in% increase$location_name, paste0(location_name,"**", sep=""), location_name)) %>% #,
arrange(target_end_date, location_name)
obs_data <- obs_data1 %>%
rename(date = wk_end_date, report = value) %>%
mutate(location_name=ifelse(location_name %in% decrease$location_name, paste0(location_name,"*", sep=""), location_name),
location_name=ifelse(location_name %in% increase$location_name, paste0(location_name,"**", sep=""), location_name)) %>% #,
arrange(date, location_name)
## Set up location vectors for labeling
all_locations <- c(grep("National", dat.plot$location_name, value = T)[1],
unique(dat.plot$location_name[dat.plot$location_name
!= grep("National", dat.plot$location_name, value = T)[1]])) #BE SURE TO UPDATE 'NATIONAL' BASED on CLASSIFICATION
increase.plot <-grep("**", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot <-grep("*", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot <-decrease.plot[which(!decrease.plot %in% increase.plot)]
plot_retro_flu(model_name)
}
