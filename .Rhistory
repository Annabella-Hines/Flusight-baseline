#usstat <- tigris::states(class = "sf")
#change.dat <- merge(usstat, change.dat1[,c(1:5, 8:10)], by.y = "location_name", by.x = "NAME")
change.dat <- merge(usstat, change.dat1, by.y = "Locations", by.x = "NAME")
#change.dat <- change.dat[-c(2),]
#change.dat$NAME
#change.mets1 <- change.dat1[, c(1:3, 8:10)]
change.mets1 <- change.dat1
change.mets1$location_name <- change.mets1$Locations
#change.mets <- change.mets1 %>%
#  pivot_longer(cols = c(-location_name), names_to = "Probability") %>%
#  pivot_wider(names_from = c(location_name))
#forcts <- all.dat %>%
#  filter(target_end_date == max(target_end_date)) %>%
#  filter(model == "Ensemble")
forcts <- dat1
Ens <- dat1
#Ens <- all.dat %>%
#  filter(model == "Ensemble")
#mods <- read_csv(paste0(rundate, "-all-hospitalizations-model-data.csv")) %>%
#  filter(model!="Ensemble") %>%
#  pull(model) %>%
#  unique
#obs_data <- read.csv(paste0(shpt, max(inclusion_dates),"/Other output/", max(inclusion_dates), "-", "reported-hosps-data.csv"))
ensemble_for_display <- "FluSight-Ensemble"
display_targets <- cast_target
display_dates <- c(as.Date(forecast_date) - seq(1, 25))
all_mod_dat <- as.data.frame(rbind(dat1, forecast_data1)) %>% dplyr::select(target, target_end_date, forecast_date, model, location_name, quantile_0.025, quantile_0.25, quantile_0.5, quantile_0.75, quantile_0.975)
source(paste0(dashpath,"/Weekly Data/Model names and colors.R"))
#source(paste0(ncov19path, "Plotting functions.R"))
#source("Dashboard Functions.R")
modelnames <- unique(forecast_data$model)
teamnames <- model_team_names[modelnames]
mandtnames <- as.data.frame(cbind(modelnames, teamnames))
mandtnames <- mandtnames[order(mandtnames$teamnames),]
#source(paste0(ncov19path, "Model names and colors.R"))
gauge.plots <- gauges("National")
par(mfrow = c(4,1))
gauge.plots$g1
gauge.plots$g2
gauge.plots$g3
gauge.plots$g4
hosp_forcs_plot("National")
forcts_ <- forcts %>% filter(location_name == "National") %>%
mutate(target_end_date = as.POSIXct(target_end_date, format = '%Y-%m-%d')) %>% filter(target == "4 wk ahead inc flu hosp")
length(modelnames)
modelnames
teamnames
length(teamnames)
length(unique(teamnames))
length(unique(model_team_names[modelnames]))` modeling groups contributed `r length(unique(forecast_data1$model))
length(unique(model_team_names[modelnames]))
length(unique(model_team_names_u[modelnames]))
knitr::opts_chunk$set(echo = TRUE)
#`r format(Sys.Date(), '%B %d, %Y')`
#format(Sys.Date()-1, '%d %B %Y')
#source("C:/Users/rpe5/Desktop/GitHub/nCov-2019/Forecast visualization/Model names and colors.R")
library("png")
# Set date of ensemble
forecast_date <- "2022-10-31"
userid = "rpe5"
#hubpath = paste0("C:/Users/",userid,"/OneDrive - CDC/Projects/covid19-forecast-hub")
#Forecasting.Folder.Location =  "CDC/EPI TF-COVID19 - Modeling/Forecasting"  #
#Forecasting.Folder.Location =  "CDC/EPI TF-COVID19 - Forecasting"  #
#hubpath = paste0("C:/Users/",CDCid,"/Desktop/GitHub/covid19-forecast-hub")
filedirec <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/")
# Directory where all forecast files are stored
# Set to this week's directory
#setwd(paste0(filedirec,rundate,"/"))
library(readxl)
library(tidyverse)
library(viridis)
mets <- read.csv(paste0(filedirec,"Weekly Data/change_metrics-", forecast_date,".csv")) ##this needs to be changed to the correct file name for deaths
mods <- read.csv(paste0(filedirec,"Weekly Data/ensemble_data-", forecast_date,".csv"))  %>% mutate(target_end_date = as.Date(target_end_date))
forc_dat <- read.csv(paste0(filedirec,"Weekly Data/forecast_data-", forecast_date,".csv"))  %>% mutate(target_end_date = as.Date(target_end_date))
forcts <- mods %>%
filter(target_end_date == max(as.Date(target_end_date)) & model == "FluSight-Ensemble" & location_name == "National") %>%
mutate(target_end_date=as.Date(target_end_date))
modsub <- forc_dat %>%
filter(model != "FluSight-Ensemble") %>%
mutate(inc = case_when(grepl("inc", target) ~ 1,
TRUE ~ 0),
cum = case_when(grepl("cum", target) ~ 1,
TRUE ~ 0)) %>%
group_by(model) %>%
summarise(inc = max(inc),
cum = max(cum)) %>%
mutate(both = case_when(inc == 1 & cum == 1 ~ 1,
TRUE ~ 0))
options(scipen=999)
select=dplyr::select
## get truth data
get_next_saturday <- function(date) {
require(lubridate)
date <- as.Date(date)
## calculate days until saturday (day 7)
diff <- 7 - wday(date)
## add to given date
new_date <- diff + date
return(new_date)
}
obs_data1 <- read_csv(paste0(filedirec,"Weekly Data/obs_data-", forecast_date,".csv")) %>%
mutate(date = as.Date(wk_end_date, "%m/%d/%y"))
obs_data <- obs_data1 %>%
dplyr::select(date) %>%
distinct() %>%
filter(date %in% c(get_next_saturday(forecast_date) + seq(0, -70, by=-7)))
forcts_ <- mods %>% filter(location_name == "National")
### Set up plots
NatName=unique(forc_dat$location_name)[grep("National",unique(forc_dat$location_name))]
all_locations <- c(NatName,
sort(unique(forc_dat$location_name[forc_dat$location_name != NatName])))
all_locations= all_locations[which(all_locations %in% unique(obs_data1$location_name))]
increase.plot <-grep("**", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot <-grep("*", all_locations, value=TRUE, fixed=TRUE) #Added vector for footnote
decrease.plot=decrease.plot[which(!decrease.plot %in% increase.plot)]
cdc_logo <- readPNG(paste0(filedirec, "HHS-CDCBadge.png"))
source(paste0(filedirec,"Weekly Data/Model names and colors.R"), local = knitr::knit_global())
source(paste0(filedirec, "Dashboard Functions.R"), local = knitr::knit_global())
length(unique(forcts_$model))
View(mods)
length(unique(modsub$model))
length(unique(model_team_names_u[modsub$model]))
library(lubridate)
library(tidyverse)
library(covidHubUtils)
library(surveillance)
library(tidytext)
userid <- "rpe5"
theme_set(theme_bw())
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_scores_Location.csv"))
View(scores)
library(lubridate)
library(tidyverse)
library(covidHubUtils)
library(surveillance)
library(tidytext)
userid <- "rpe5"
theme_set(theme_bw())
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_scores_Location.csv"))
View(scores)
fig_wis_box <- ggplot(scores, aes(x = Model, y = relative_WIS)) +
geom_boxplot()
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot()
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9))
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9),
ylab = "Relative WIS")
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
labs(y = "Relative WIS") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9))
fig_wis_box
fig_wis_box <- ggplot(scores, aes(x = model, y = relative_WIS)) +
geom_boxplot() +
labs(y = "Relative WIS", x = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9))
fig_wis_box
jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS_scores_Boxplot.jpg"), width=8, height=8, units="in", res=300)
print(fig_wis_box)
dev.off()
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
pacman::p_load(
tidyverse,
flexdashboard,
shiny,
plotly,
sf,
tmap,
ggplot2,
RColorBrewer,
raster,
ggtext,
forcats,
grid,
tidyquant,
RSocrata,
covidHubUtils,
hubEnsembles,
xlsx,
kableExtra
)
userid <- "rpe5"
flusight_path <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/")
obspath <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/data-truth")
dashpath <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code")
forecast_date = "2022-11-14" # Monday
#sixweeks_before_forecast_date = "2022-05-09" # 6 weeks ago Monday
ensemble_code_path = paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-ensemble")
source("Dashboard Functions.R")
output_dir <- paste0(ensemble_code_path, "/", forecast_date, "/")
cast_target = c(paste(1:4, "wk inc flu hosp"))
location_names <- read.csv(paste0(flusight_path, "/data-locations/locations.csv"))
#cov.dat <- read.csv("forecast-eval-Hospitalizations-coverage-averaged-over-common-locations-Coverage-interval-95-2021-12-13.csv")
oneweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 7, "-Flusight-ensemble.csv")) %>% filter(target == "1 wk ahead inc flu hosp")
twoweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 14, "-Flusight-ensemble.csv")) %>% filter(target == "2 wk ahead inc flu hosp")
threeweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 21, "-Flusight-ensemble.csv")) %>% filter(target == "3 wk ahead inc flu hosp")
fourweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 28, "-Flusight-ensemble.csv")) %>% filter(target == "4 wk ahead inc flu hosp")
cov.dat1 <- data.frame(rbind(oneweek, twoweek, threeweek))#, fourweek))
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat <- cov.dat1 %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, target, sep = "_")) %>%
dplyr::select(target, target_end_date, forecast_date, location_name, c(7:27)) %>%
group_by(target, target_end_date, forecast_date, location_name) %>%
summarise_all(sum, na.rm = T)
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat1 <- data.frame(rbind(oneweek, twoweek, threeweek, fourweek))
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat <- cov.dat1 %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, target, sep = "_")) %>%
dplyr::select(target, target_end_date, forecast_date, location_name, c(7:27)) %>%
group_by(target, target_end_date, forecast_date, location_name) %>%
summarise_all(sum, na.rm = T)
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
obs <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/data-truth/truth-Incident Hospitalizations.csv")) %>%
mutate(wk_end_date = get_next_saturday(as.POSIXct(date, "%y/%m/%d")),
location_name = ifelse(location == 'US', 'National', location_name)) %>%
filter(date <= forecast_date) %>%
filter(date >= as.Date("2022-08-29", format = "%Y-%m-%d")) %>%
dplyr::select(-date) %>%
group_by(location_name, wk_end_date) %>%
summarise(value = sum(value)) %>%
ungroup()
obs_data1 <- obs
oneweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 7, "-Flusight-ensemble.csv")) %>% filter(target == "1 wk ahead inc flu hosp")
twoweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 14, "-Flusight-ensemble.csv")) %>% filter(target == "2 wk ahead inc flu hosp")
threeweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 21, "-Flusight-ensemble.csv")) %>% filter(target == "3 wk ahead inc flu hosp")
fourweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 28, "-Flusight-ensemble.csv")) %>% filter(target == "4 wk ahead inc flu hosp")
cov.dat1 <- data.frame(rbind(oneweek, twoweek, threeweek, fourweek))
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat <- cov.dat1 %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, target, sep = "_")) %>%
dplyr::select(target, target_end_date, forecast_date, location_name, c(7:27)) %>%
group_by(target, target_end_date, forecast_date, location_name) %>%
summarise_all(sum, na.rm = T)
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
cov.dat$coverage.95 = ifelse(cov.dat$value >= cov.dat$quantile_0.025 & cov.dat$value <= cov.dat$quantile_0.975,T,F)
Percent.Cov.95 <- cov.dat %>% group_by(target, target_end_date) %>%
summarize(Score = round(100*mean(coverage.95, na.rm = T)))
old <- read.csv(paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))[,-c(1)]
old$target_end_date <- as.Date(old$target_end_date, format = "%Y-%m-%d")
Percent.Cov.95 <- unique(data.frame(rbind(Percent.Cov.95, old)))
Percent.Cov.95 <- Percent.Cov.95 %>% dplyr::filter(target_end_date <= as.Date(forecast_date)+30) %>% dplyr::filter(is.na(Score) == F) %>% arrange(target_end_date)
write.csv(Percent.Cov.95, paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))
cov.dat1 <- Percent.Cov.95 %>% filter(target == "1 wk ahead inc flu hosp")
cov.dat2 <- Percent.Cov.95 %>% filter(target == "2 wk ahead inc flu hosp")
cov.dat3 <- Percent.Cov.95 %>% filter(target == "3 wk ahead inc flu hosp")
cov.dat4 <- Percent.Cov.95 %>% filter(target == "4 wk ahead inc flu hosp")
cov.dat1$Score100 <- cov.dat1$Score
covplot <- plot_ly() %>%
add_trace(data = cov.dat1, type = "scatter", mode = "lines", fill = "tozeroy", x = ~target_end_date, y = ~Score100, name = "Score100") %>%
layout(showlegend = F, yaxis = list(range = c(0, 100), zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "Percent Coverage (%)", titlefont = list(size = 12)), xaxis = list(zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "1 week ahead Target Date"), plot_bgcolor = "#e5ecf6")
options(warn = -1)
covplot
View(cov.dat1)
Percent.Cov.95 <- cov.dat %>% group_by(target, target_end_date) %>%
summarize(Score = round(100*mean(coverage.95, na.rm = T)))
old <- read.csv(paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))[,-c(1)]
old$target_end_date <- as.Date(old$target_end_date, format = "%Y-%m-%d")
Percent.Cov.95 <- unique(data.frame(rbind(Percent.Cov.95, old)))
write.csv(Percent.Cov.95, paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))
View(Percent.Cov.95)
oneweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 7, "-Flusight-ensemble.csv")) %>% filter(target == "1 wk ahead inc flu hosp")
twoweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 14, "-Flusight-ensemble.csv")) %>% filter(target == "2 wk ahead inc flu hosp")
threeweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 21, "-Flusight-ensemble.csv")) %>% filter(target == "3 wk ahead inc flu hosp")
fourweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 28, "-Flusight-ensemble.csv")) %>% filter(target == "4 wk ahead inc flu hosp")
cov.dat1 <- data.frame(rbind(oneweek, twoweek, threeweek, fourweek))
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat <- cov.dat1 %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, target, sep = "_")) %>%
dplyr::select(target, target_end_date, forecast_date, location_name, c(7:27)) %>%
group_by(target, target_end_date, forecast_date, location_name) %>%
summarise_all(sum, na.rm = T)
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
cov.dat$coverage.95 = ifelse(cov.dat$value >= cov.dat$quantile_0.025 & cov.dat$value <= cov.dat$quantile_0.975,T,F)
Percent.Cov.95 <- cov.dat %>% group_by(target, target_end_date) %>%
summarize(Score = round(100*mean(coverage.95, na.rm = T)))
old <- read.csv(paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))[,-c(1)]
old$target_end_date <- as.Date(old$target_end_date, format = "%Y-%m-%d")
Percent.Cov.95 <- unique(data.frame(rbind(Percent.Cov.95, old)))
Percent.Cov.95 <- Percent.Cov.95 %>% dplyr::filter(target_end_date <= as.Date(forecast_date)+30) %>% dplyr::filter(is.na(Score) == F) %>% arrange(target_end_date)
View(Percent.Cov.95)
#cov.dat <- read.csv("forecast-eval-Hospitalizations-coverage-averaged-over-common-locations-Coverage-interval-95-2021-12-13.csv")
oneweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 7, "-Flusight-ensemble.csv")) %>% filter(target == "1 wk ahead inc flu hosp")
threeweek <- read.csv(paste0(flusight_path,"data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 21, "-Flusight-ensemble.csv")) %>% filter(target == "3 wk ahead inc flu hosp")
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
cov.dat$coverage.95 = ifelse(cov.dat$value >= cov.dat$quantile_0.025 & cov.dat$value <= cov.dat$quantile_0.975,T,F)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
View(cov.dat)
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
cov.dat$coverage.95 = ifelse(cov.dat$value >= cov.dat$quantile_0.025 & cov.dat$value <= cov.dat$quantile_0.975,T,F)
Percent.Cov.95 <- cov.dat %>% group_by(target, target_end_date) %>%
summarize(Score = round(100*mean(coverage.95, na.rm = T)))
old <- read.csv(paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))[,-c(1)]
old$target_end_date <- as.Date(old$target_end_date, format = "%Y-%m-%d")
Percent.Cov.95 <- unique(data.frame(rbind(Percent.Cov.95, old)))
Percent.Cov.95 <- Percent.Cov.95 %>% dplyr::filter(target_end_date <= as.Date(forecast_date)+30) %>% dplyr::filter(is.na(Score) == F) %>% arrange(target_end_date)
View(Percent.Cov.95)
Percent.Cov.95 <- Percent.Cov.95[-c(7),]
View(Percent.Cov.95)
write.csv(Percent.Cov.95, paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))
cov.dat1 <- Percent.Cov.95 %>% filter(target == "1 wk ahead inc flu hosp")
cov.dat3 <- Percent.Cov.95 %>% filter(target == "3 wk ahead inc flu hosp")
cov.dat1$Score100 <- cov.dat1$Score
covplot <- plot_ly() %>%
add_trace(data = cov.dat1, type = "scatter", mode = "lines", fill = "tozeroy", x = ~target_end_date, y = ~Score100, name = "Score100") %>%
layout(showlegend = F, yaxis = list(range = c(0, 100), zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "Percent Coverage (%)", titlefont = list(size = 12)), xaxis = list(zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "1 week ahead Target Date"), plot_bgcolor = "#e5ecf6")
options(warn = -1)
covplot
cov.dat2$Score100 <- cov.dat2$Score
options(warn = -1)
covplot
cov.dat2$Score100 <- cov.dat2$Score
covplot <- plot_ly() %>%
add_trace(data = cov.dat2, type = "scatter", mode = "lines", fill = "tozeroy", x = ~target_end_date, y = ~Score100, name = "Score100") %>%
layout(showlegend = F, yaxis = list(range = c(0, 100), zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "Percent Coverage (%)", titlefont = list(size = 12)), xaxis = list(zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "2 week ahead Target Date"), plot_bgcolor = "#e5ecf6")
options(warn = -1)
covplot
cov.dat3$Score100 <- cov.dat3$Score
covplot <- plot_ly() %>%
add_trace(data = cov.dat3, type = "scatter", mode = "lines", fill = "tozeroy", x = ~target_end_date, y = ~Score100, name = "Score100") %>%
layout(showlegend = F, yaxis = list(range = c(0, 100), zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "Percent Coverage (%)", titlefont = list(size = 12)), xaxis = list(zerolinecolor = "#ffff", zerolinewidth = 2, gridcolor = "ffff", title = "3 week ahead Target Date"), plot_bgcolor = "#e5ecf6")
options(warn = -1)
covplot
