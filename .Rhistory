#   mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
#
# coverage95_flusight <- coverage95_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
# coverage95_not_flusight <- coverage95_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
#
#
# p <- ggplot(coverage95_flusight, aes(x = target_end_date,
#                                      y = coverage95, group = model,
#                                      col = model)) +
#   geom_line(size = 1) + geom_point(size = 2) +
#   #scale_color_manual(values = c("red", "green")) +
#   geom_line(data = coverage95_not_flusight, aes(x = target_end_date, y = coverage95, group = model), color = adjustcolor("grey", .5)) +
#   labs(y = "95% Coverage",
#        x = "",
#        color = "Model",
#        title = "4 Week Ahead 95% Coverage by Model") +
#   theme_bw()+
#   scale_x_date(breaks = seq.Date(from = min(coverage95_flusight$target_end_date), to= max(coverage95_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
#   theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
# #theme_minimal()
# p
#jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Coverage_95_States_1and4week_figure_sm.jpg"), width=8, height=5, units="in", res=300)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
#pdf(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Coverage_95_States_1and4week_figure_sm.pdf"), width=8, height=5)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
coverage50_states <- scores1 %>% #filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
coverage50 = mean(coverage.50)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray"))) %>% ungroup()
coverage50_flusight <- coverage50_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage50_not_flusight <- coverage50_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
g <- ggplot(coverage50_flusight, aes(x = target_end_date,
y = coverage50, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = coverage50_not_flusight, aes(x = target_end_date, y = coverage50, group = model), color = adjustcolor("grey", .5)) +
labs(y = "50% Coverage",
x = "",
color = "Model",
title = "50% Coverage by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(coverage50_flusight$target_end_date), to= max(coverage50_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
facet_grid(rows = vars(target), labeller = coverage_labels)
#theme_minimal()
g
# coverage50_states <- scores %>% filter(location_name != "National") %>%
#   filter(target == "4 wk ahead inc flu hosp") %>%
#   group_by(model, target_end_date) %>%
#   summarise(model = model,
#             target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
#             coverage50 = mean(coverage.50)) %>%
#   mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
#
# coverage50_flusight <- coverage50_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
# coverage50_not_flusight <- coverage50_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
#
#
# p <- ggplot(coverage50_flusight, aes(x = target_end_date,
#                                      y = coverage50, group = model,
#                                      col = model)) +
#   geom_line(size = 1) + geom_point(size = 2) +
#   #scale_color_manual(values = c("red", "green")) +
#   geom_line(data = coverage50_not_flusight, aes(x = target_end_date, y = coverage50, group = model), color = adjustcolor("grey", .5)) +
#   labs(y = "50% Coverage",
#        x = "",
#        color = "Model",
#        title = "4 Week Ahead 50% Coverage by Model") +
#   theme_bw()+
#   scale_x_date(breaks = seq.Date(from = min(coverage50_flusight$target_end_date), to= max(coverage50_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
#   theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
# p
#jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Coverage_50_States_1and4week_figure_sm.jpg"), width=8, height=5, units="in", res=300)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
#pdf(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Coverage_50_States_1and4week_figure.pdf"), width=8, height=5)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
locationcount <- length(unique(scores1$location_name))
coverage95_summary <- scores1 %>%  filter(model == "Flusight-ensemble") %>% #filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) #%>%
#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_summary_4 <- scores1 %>%  filter(model == "Flusight-ensemble") %>% #filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique()
coverage50_summary_4 <- scores1 %>%  filter(model == "Flusight-ensemble") %>% #filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount) %>% unique()
coverage50_summary <- scores1 %>% filter(model == "Flusight-ensemble") %>%# filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount)# %>%
# mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
summary(coverage95_summary_4$coverage95)
summary(coverage50_summary_4$coverage50)
coverage95_summary_all <- scores1 %>%  filter(model != "Flusight-ensemble") %>% # filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique() %>%
group_by(model) %>% summarise(model = model,
avg = mean(coverage95)) %>% unique()
#%>%
#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_summary_all <- scores1 %>% filter(model != "Flusight-ensemble") %>% # filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount)# %>%
# mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
summary(coverage95_summary_all$coverage95)
summary(coverage50_summary_all$coverage50)
summary(coverage95_summary_4$coverage95)
coverage95_summary_all2 <- scores1 %>%  filter(model != "Flusight-ensemble") %>% # filter(location_name != "National") %>%
filter(target == "2 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique() %>%
group_by(model) %>% summarise(model = model,
avg = mean(coverage95)) %>% unique()
weekly_breakdown <- scores1 %>% group_by(model) %>% summarise(
model = model,
One_week_Cov = mean(coverage.95[target == "1 wk ahead inc flu hosp"])*100,
Two_week_Cov = mean(coverage.95[target == "2 wk ahead inc flu hosp"])*100,
Three_week_Cov = mean(coverage.95[target == "3 wk ahead inc flu hosp"])*100,
Four_week_Cov = mean(coverage.95[target == "4 wk ahead inc flu hosp"])*100
) %>% unique()
coverage95_states_horizon <- scores1 %>% # filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Percent_above_90 = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Percent_above_90 = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Percent_above_90 = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Percent_above_90 = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
cov95_breakdown_all <- merge(Scores_tab, cov95_breakdown, by = "model")
cov95_breakdown_all %>% arrange(Relative_WIS) %>% mutate_if(is.numeric, round, digits = 2) %>%  knitr::kable(align = c("lcccccccccc"), caption = "Table 2", col.names = c("Model", "Relative WIS", "% WIS Below Baseline", "1 Wk Coverage", "2 Wk Coverage", "3 Wk Coverage", "4 Wk Coverage", "% Cov abv 90 (1 Wk)", "% Cov abv 90 (2 Wk)", "% Cov abv 90 (3 Wk)", "% Cov abv 90 (4 Wk)")) %>%
kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "")%>%
kableExtra::kable_classic()# %>%
#  kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","Covtable2.pdf"), zoom = .6)
length(unique(coverage95_states$target_end_date[coverage95_states$target == "1 wk ahead inc flu hosp"]))
length(unique(coverage95_states$target_end_date))
length(unique(scores1$forecast_date))
unique(scores1$target_end_date[scores1$target == "1 wk ahead inc flu hosp"])
unique(scores1$target_end_date[scores1$target == "4 wk ahead inc flu hosp"])
userid <- "rpe5"
scores2 <- WIS_Season
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
abs_states <- scores2 %>% #filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
abs_WIS = mean(WIS)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
wis_labels <- as_labeller(c(`1 wk ahead inc flu hosp` = "1 Week Ahead",
`4 wk ahead inc flu hosp` = "4 Week Ahead"))
g <- ggplot(abs_flusight, aes(x = target_end_date,
y = abs_WIS, group = model,
col = model)) +
geom_line(size = 1) + geom_point(size = 2) +
#scale_color_manual(values = c("red", "green")) +
geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey", .5)) +
labs(y = "Absolute WIS",
x = "",
color = "Model",
title = "Absolute WIS by Model") +
theme_bw()+
scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
facet_grid(rows = vars(target), labeller = wis_labels)
g
# abs_states <- scores %>% filter(location_name != "National") %>%
#   filter(target == "4 wk ahead inc flu hosp") %>%
#   group_by(model, target_end_date) %>%
#   summarise(model = model,
#             target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
#             abs_WIS = mean(WIS)) %>%
#   mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
#
# abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
# abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
#
#
# p <- ggplot(abs_flusight, aes(x = target_end_date,
#                               y = abs_WIS, group = model,
#                               col = model)) +
#   geom_line(size = 1) + geom_point(size = 2) +
#   #scale_color_manual(values = c("red", "green")) +
#   geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey", .5)) +
#   labs(y = "Absolute WIS",
#        x = "",
#        color = "Model",
#        title = "4 Week Ahead Absolute WIS by Model") +
#   theme_bw()+
#   scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b %Y") +
#   theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())
#
# p
#jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Abs_WIS_States_1and4week_figure.jpg"), width=8, height=5, units="in", res=300)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
#pdf(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Abs_WIS_States_1and4week_figure.pdf"), width=8, height=5)
#grid.arrange(g, p, ncol = 1)
#print(g)
#dev.off()
scores_order <- inc.rankings_all %>% arrange(`Relative WIS`)
s.order <- scores_order[,c(1,3)]
model_abs <- abs_states %>% unique() %>% group_by(model, target) %>% summarise(
model = model,
target = target,
minimum = min(abs_WIS),
maximum = max(abs_WIS),
Median = median(abs_WIS)
) %>% unique()
abs_states_all <- scores2 %>% #filter(location_name != "National") %>%
# filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
abs_WIS = mean(WIS)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
model_abs_all <- abs_states_all %>% unique() %>% group_by(model, target) %>% summarise(
model = model,
target = target,
minimum = min(abs_WIS),
maximum = max(abs_WIS),
Median = median(abs_WIS)
) %>% unique()
abs_breakdown <- scores2 %>% group_by(model) %>% summarise(
model = model,
One_week_abs = mean(WIS[target == "1 wk ahead inc flu hosp"]),
Two_week_abs = mean(WIS[target == "2 wk ahead inc flu hosp"]),
Three_week_abs = mean(WIS[target == "3 wk ahead inc flu hosp"]),
Four_week_abs = mean(WIS[target == "4 wk ahead inc flu hosp"])
) %>% unique()
abs_breakdown <- merge(abs_breakdown, s.order, by = "model")
abs_breakdown <- abs_breakdown %>% arrange(`Relative WIS`)
abs_breakdown$`Relative WIS` <- NULL
summary(abs_breakdown$One_week_abs)
summary(abs_breakdown$Two_week_abs)
summary(abs_breakdown$Three_week_abs)
summary(abs_breakdown$Four_week_abs)
View(abs_breakdown)
View(model_abs_all)
abs_breakdown %>% mutate_if(is.numeric, round, digits = 2) %>%  knitr::kable(align = c("lcccc"), caption = "Table 3", col.names = c("Model", "1 Wk ABS WIS", "2 Wk ABS WIS", "3 Wk ABS WIS", "4 Wk ABS WIS")) %>%
kableExtra::footnote(general = "Table 3: Breakdown of Average Absolute WIS by Horizon", general_title = "")%>%
kableExtra::kable_classic() #%>%
library(lubridate)
library(tidyverse)
library(covidHubUtils)
library(surveillance)
library(tidytext)
library(stringr)
userid <- "rpe5"
theme_set(theme_bw())
scores3 <- inc.rankings_all_locations# %>% mutate_if(is.numeric, round, digits = 2)
#scores_order <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_inc.rankings_all.csv"))
scores_order <- inc.rankings_all %>% arrange(`Relative WIS`)
levels_order <- scores_order$Model
unique(scores3$model)
fig_wis_loc <- ggplot(scores3,
aes(x = factor(model, levels = levels_order), y=location_name,
fill= scales::oob_squish(relative_WIS, range = c(- 2.584963, 2.584963)))) +
geom_tile() +
geom_text(aes(label = signif(relative_WIS, 2)), size = 2.5) + # I adapted the rounding
scale_fill_gradient2(low = "blue", high = "red", midpoint = 1, na.value = "grey50",
name = "Relative WIS",
breaks = c(-2,-1,0,1,2),
labels =c("0.25", 0.5, 1, 2, 4)) +
xlab(NULL) + ylab(NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
#                            color=ifelse(
#                              levels(average_by_loc_to_plot$model) %in% models_to_highlight,
#                              "red", "black")),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9)) +
scale_y_discrete(limits = rev)
#pdf(file = "figures/fig-wis-location.pdf",width=8, height=8)
#print(fig_wis_loc)
#dev.off()
jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS_scores_Location_NN.jpg"), width=8, height=8, units="in", res=300)
print(fig_wis_loc)
dev.off()
fig_wis_box <- ggplot(scores3, aes(x = factor(model, levels = levels_order), y = relative_WIS)) +
geom_boxplot() +
labs(y = "Relative WIS", x = "Model") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(size = 9),
title = element_text(size = 9)) +
geom_hline(yintercept = 1, color = "red")
#jpeg(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS_scores_Boxplot.jpg"), width=8, height=8, units="in", res=300)
#print(fig_wis_box)
#dev.off()
scores3$below <- ifelse(scores3$relative_WIS < 1, 1, 0)
belowbase <- scores3 %>% group_by(model) %>% summarise(model = model,
below_pct = mean(below)*100) %>% unique()
Scores_sum <- scores3 %>% group_by(model) %>% summarise(
model = model,
Absolute_WIS = mean(mean.WIS),
Relative_WIS = mean(relative_WIS),
below_baseline_pct = mean(below)*100
) %>% unique()
Scores_tab <- merge(Scores_sum, weekly_breakdown, by = "model")
Scores_tab$Absolute_WIS <- NULL
Scores_tab$Relative_WIS <- NULL
Scores_tab %>% arrange(scores_order$`Relative WIS`) %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lccccccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "")%>%
kableExtra::kable_classic()# %>%
#  kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/WIStable2.pdf"), zoom = .5)
Scores_tab %>% arrange(scores_order$Model) %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lccccccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "")%>%
kableExtra::kable_classic()# %>%
scores_order$Model
Scores_tab <- merge(Scores_tab, scores_order[,c(1,2)], by = "model")
Scores_tab <- merge(Scores_sum, weekly_breakdown, by = "model")
Scores_tab$Absolute_WIS <- NULL
Scores_tab$Relative_WIS <- NULL
Scores_tab <- merge(Scores_tab, scores_order[,c(1,3)], by = "model")
Scores_tab %>% arrange("`Relative WIS`") %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lccccccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "")%>%
kableExtra::kable_classic()# %>%
Scores_tab %>% arrange(`Relative WIS`) %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lccccccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "")%>%
kableExtra::kable_classic()# %>%
max(scores3$relative_WIS)
scores3 <- inc.rankings_all_locations# %>% mutate_if(is.numeric, round, digits = 2)
max(scores3$relative_WIS)
View(scores3)
View(weekly_breakdown)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Percent_above_90 = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Percent_above_90 = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Percent_above_90 = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Percent_above_90 = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(cov95_breakdown_all)
## average rank
average_rank_percent <- inc_scores_overall %>%
group_by(model) %>%
summarize(average_rank = mean(rev_rank), total_n = n(),
n_top50 = sum(rev_rank> 0.5) , pct_top50 = n_top50/total_n*100) %>%
print(n=Inf) %>% arrange(-pct_top50)
View(average_rank_percent)
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
