#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage50_summary_all <- scores %>% filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage50 = sum(coverage.50)/locationcount)# %>%
# mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
summary(coverage95_summary_all$coverage95)
summary(coverage50_summary_all$coverage50)
coverage95_summary_all2 <- scores %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "2 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique() %>%
group_by(model) %>% summarise(model = model,
avg = mean(coverage95)) %>% unique()
weekly_breakdown <- scores %>% group_by(model) %>% summarise(
model = model,
One_week_Cov = mean(coverage.95[target == "1 wk ahead inc flu hosp"])*100,
Two_week_Cov = mean(coverage.95[target == "2 wk ahead inc flu hosp"])*100,
Three_week_Cov = mean(coverage.95[target == "3 wk ahead inc flu hosp"])*100,
Four_week_Cov = mean(coverage.95[target == "4 wk ahead inc flu hosp"])*100
) %>% unique()
View(weekly_breakdown)
View(scores)
View(coverage95)
View(coverage95_states)
View(weekly_breakdown)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95))
View(coverage95_states_horizon)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
View(coverage95_states_horizon)
View(coverage95_states_horizon)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage.95[target == "1 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage.95[target == "2 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage.95[target == "3 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage.95[target == "4 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(coverage95_states_horizon)
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
coverage95_states_horizon <- scores %>% filter(location_name != "National") %>%
#  filter(target == "1 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
target = target,
coverage95 = mean(coverage.95)) %>% unique()
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage.95[target == "1 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage.95[target == "2 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage.95[target == "3 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage.95[target == "4 wk ahead inc flu hosp" & coverage.95 >= 0.9])/length(coverage.95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
One_week_Cov = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(cov95_breakdown)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Cov = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Cov = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Cov = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Cov = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
View(cov95_breakdown)
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 2: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable1.pdf"), zoom = .5)
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 3: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable3.pdf"), zoom = .5)
cov95_breakdown <- coverage95_states_horizon %>%
group_by(model) %>%
summarise(model = model,
One_week_Percent_above_90 = (length(coverage95[target == "1 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "1 wk ahead inc flu hosp"]))*100,
Two_week_Percent_above_90 = (length(coverage95[target == "2 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "2 wk ahead inc flu hosp"]))*100,
Three_week_Percent_above_90 = (length(coverage95[target == "3 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "3 wk ahead inc flu hosp"]))*100,
Four_week_Percent_above_90 = (length(coverage95[target == "4 wk ahead inc flu hosp" & coverage95 >= 0.9])/length(coverage95[target == "4 wk ahead inc flu hosp"]))*100,
) %>% unique()
cov95_breakdown %>% mutate_if(is.numeric, round, digits = 4) %>%  knitr::kable(align = c("lcccc"), caption = "Table 2") %>%
kableExtra::footnote(general = "Table 3: ", general_title = "")%>%
kableExtra::kable_classic() %>%
kableExtra::save_kable(file = paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/","/Covtable3.pdf"), zoom = .5)
userid <- "nqr2"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
userid <- "rpe5"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
coverage95 <- scores %>% filter(location_name == "National") %>%
# filter(target == "4 wk ahead inc flu hosp") %>%
group_by(model, forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/4) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
coverage95_flusight <- coverage95 %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95 %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_summary <- scores %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) #%>%
locationcount <- length(unique(scores$location_name)) - 1
coverage95_summary <- scores %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "1 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) #%>%
View(coverage95_summary)
coverage95_summary_4 <- scores %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount)
View(coverage95_summary_4)
coverage95_summary_4 <- scores %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
filter(target == "4 wk ahead inc flu hosp") %>%
group_by(forecast_date) %>%
summarise(model = model,
forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
coverage95 = sum(coverage.95)/locationcount) %>% unique()
View(coverage95_summary_4)
summary(coverage95_summary_4$coverage95)
userid <- "rpe5"
scores <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/WIS Ranks Data/WIS_Season.csv"))
'%!in%' <- Negate('%in%')
library(ggplot2)
library(tidyverse)
library(gridExtra)
source(paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/Model names and colors.R"))
abs_states_all <- scores %>% filter(location_name != "National") %>%
# filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>%
group_by(model, target_end_date, target) %>%
summarise(model = model,
target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
abs_WIS = mean(WIS)) %>%
mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))
model_abs_all <- abs_states %>% unique() %>% group_by(model, target) %>% summarise(
model = model,
target = target,
minimum = min(abs_WIS),
maximum = max(abs_WIS),
Median = median(abs_WIS)
) %>% unique()
model_abs_all <- abs_states_all %>% unique() %>% group_by(model, target) %>% summarise(
model = model,
target = target,
minimum = min(abs_WIS),
maximum = max(abs_WIS),
Median = median(abs_WIS)
) %>% unique()
View(model_abs_all)
View(model_abs_all)
View(model_abs_all)
abs_breakdown <- scores %>% group_by(model) %>% summarise(
model = model,
One_week_abs = mean(WIS[target == "1 wk ahead inc flu hosp"]),
Two_week_abs = mean(WIS[target == "2 wk ahead inc flu hosp"]),
Three_week_abs = mean(WIS[target == "3 wk ahead inc flu hosp"]),
Four_week_abs = mean(WIS[target == "4 wk ahead inc flu hosp"])
) %>% unique()
View(abs_breakdown)
library(tidyverse)
library(epiDisplay)
library(MMWRweek)
library(dplyr)
library(forcats)
'%notin%' <- Negate('%in%')
last.tuesday = as.Date("2023-03-21")
window.width = c(2, 4, 8)
eval.weeks = 8
weeks.to.eval =
seq((last.tuesday+4)- 7*(eval.weeks-1) - 7*(max(window.width)-1),
last.tuesday+4,
by=7) %>%
as.character()
CDCid="rpe5"#"oko8"
userid <- CDCid
#ncov19hub <- paste0("C:/Users/",CDCid,"/OneDrive - CDC/Projects/nCov-2019/Forecast visualization/")
#hubpath = paste0("C:/Users/",CDCid,"/OneDrive - CDC/Projects/covid19-forecast-hub")
# hubpath <-"C:/Users/rpe5/Desktop/GitHub/covid19-forecast-hub"
# ncov19hub <-"C:/Users/rpe5/Desktop/GitHub/nCov-2019/Forecast visualization/"
dashpath <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code")
hubpath <-paste0("C:/Users/",CDCid,"/Desktop/GitHub/Flusight-forecast-data")
ncov19hub <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Weekly Data/")
get_next_saturday <- function(date) {
require(lubridate)
date <- as.Date(date)
## calculate days until saturday (day 7)
diff <- 7 - wday(date)
## add to given date
new_date <- diff + date
return(new_date)
}
get_next_tuesday <- function(date) {
require(lubridate)
date <- as.Date(date)
## calculate days until saturday (day 7)
diff = ifelse(wday(date) <= (3), 3-wday(date), 3+7-wday(date))
## add to given date
new_date <- diff + date
return(new_date)
}
select = dplyr::select
filter = dplyr::filter
##########################################################################################################
#########################################################################################################
datapath <- paste0(hubpath,"/data-forecasts")
filenames = list.files(path=datapath, pattern=".csv",
full.names = TRUE, recursive = TRUE)
unique_model_names <- unique(str_split(filenames, "/", simplify = TRUE)[, 8:9])
unique_model_names = cbind(unique_model_names, substr(unique_model_names[,2],1,10) )
unique_model_names = data.frame(model = as.character(unique_model_names[,1]),
filename = as.character(unique_model_names[,2]),
date.submitted = unique_model_names[,3],
next.tuesday = get_next_tuesday(as.Date(unique_model_names[,3]))) %>%
group_by(model, next.tuesday) %>%
summarise(filename = as.character(filename[which.max(as.Date(date.submitted))])) %>%
ungroup() %>%
mutate(model = as.character(model),
next.tuesday = as.character(next.tuesday)) %>%
filter(next.tuesday %in%
as.character(
last.tuesday - 7*(0:((eval.weeks-1)+max(window.width)+(4-1)-1))
)
) %>%
filter(next.tuesday == as.character(last.tuesday))
#unique_model_names <- unique_model_names[-which(unique_model_names$model == "COVIDhub-ensemble"),]
filenames =
paste0(hubpath,"/data-forecasts/",
unique_model_names$model, "/",
unique_model_names$filename)
dat_list <- lapply(filenames,
FUN = function(x){
read_csv(x, col_types = cols(.default = "c")) %>%
filter(grepl("hosp", target),
target %in% c(#paste(1:4,"wk ahead cum death"),
paste(1:4,"wk ahead inc flu hosp"))#,
#target_end_date == as.character(last.tuesday+4)
)
}
)
models = unique_model_names$model
unique_models = unique(models)
## load in all files sequentially
all_dat_new <- tibble()
for (i in c(1:length(dat_list))) {
all_dat_new <- bind_rows(all_dat_new,
dat_list[[i]] %>%
select(location, target, target_end_date, forecast_date,
type, quantile, value) %>%
mutate(
location = as.character(location),
location =
as.character(ifelse(location %in% as.character(1:9),
paste0("0",location),location)),
model = models[i],
value = as.numeric(value),
quantile = as.numeric(quantile)  ,
quantile=ifelse(quantile=="NaN", NA, quantile)
)
)
}
#all_dat_new <-all_dat_new %>%
#  filter(!(model %in% models_to_exclude))
# load old data
week.to.drop = as.character(last.tuesday-7*((eval.weeks-1)+max(window.width)+(4-1)-1))
load(paste0(ncov19hub,"WIS eval datasets/Hosp_WIS_2022_EW_Cali_",MMWRweek(last.tuesday-7)$MMWRweek,".Rdata"))
pacman::p_load(
tidyverse,
flexdashboard,
shiny,
plotly,
sf,
tmap,
ggplot2,
RColorBrewer,
raster,
ggtext,
forcats,
grid,
tidyquant,
RSocrata,
covidHubUtils,
hubEnsembles,
xlsx,
kableExtra
)
userid <- "rpe5"
forecast_date = "2023-04-03" # Monday
options(scipen = 999)
flusight_path <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/")
obspath <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/data-truth")
dashpath <- paste0("C:/Users/",userid,"/Desktop/GitHub/Flu-Visualizations/Dashboard R Code")
#sixweeks_before_forecast_date = "2022-05-09" # 6 weeks ago Monday
ensemble_code_path = paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-ensemble")
source("C:/Users/rpe5/Desktop/GitHub/Flu-Visualizations/Dashboard R Code/Dashboard Functions.R")
output_dir <- paste0(ensemble_code_path, "/", forecast_date, "/")
cast_target = c(paste(1:4, "wk inc flu hosp"))
location_names <- read.csv(paste0(flusight_path, "/data-locations/locations.csv"))
obs <- read.csv(paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data/data-truth/truth-Incident Hospitalizations.csv")) %>%
mutate(wk_end_date = get_next_saturday(as.POSIXct(date, "%y/%m/%d")),
location_name = ifelse(location == 'US', 'National', location_name)) %>%
filter(date <= forecast_date) %>%
filter(date >= as.Date("2022-08-29", format = "%Y-%m-%d")) %>%
dplyr::select(-date) %>%
group_by(location_name, wk_end_date) %>%
summarise(value = sum(value)) %>%
ungroup()
obs_data1 <- obs
oneweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 7, "-Flusight-ensemble.csv")) %>% filter(target == "1 wk ahead inc flu hosp")
twoweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 14, "-Flusight-ensemble.csv")) %>% filter(target == "2 wk ahead inc flu hosp")
threeweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 21, "-Flusight-ensemble.csv")) %>% filter(target == "3 wk ahead inc flu hosp")
fourweek <- read.csv(paste0(flusight_path,"/data-forecasts/Flusight-ensemble/", as.Date(forecast_date) - 28, "-Flusight-ensemble.csv")) %>% filter(target == "4 wk ahead inc flu hosp")
cov.dat1 <- data.frame(rbind(oneweek, twoweek, threeweek, fourweek))
cov.dat1$location_name <- location_names$location_name[match(cov.dat1$location, location_names$location)]
cov.dat <- cov.dat1 %>%
mutate(value = case_when(quantile==0.5 ~ round(value),
quantile<0.5 ~ floor(value),
quantile>0.5 ~ ceiling(value),
type=='point' ~ round(value))) %>%
pivot_wider(names_from = c(type, quantile), values_from=value, values_fill = 0) %>%
mutate(target_end_date = as.Date(target_end_date),
forecast_date = as.Date(forecast_date),
id=paste(location, target, sep = "_")) %>%
dplyr::select(target, target_end_date, forecast_date, location_name, c(7:27)) %>%
group_by(target, target_end_date, forecast_date, location_name) %>%
summarise_all(sum, na.rm = T)
cov.dat$location_name <- ifelse(cov.dat$location_name == "US", "National", cov.dat$location_name)
cov.dat <- left_join(cov.dat, obs_data1, by = c("target_end_date" = "wk_end_date", "location_name" = "location_name"))
cov.dat$coverage.50 = ifelse(cov.dat$value >= cov.dat$quantile_0.25 & cov.dat$value <= cov.dat$quantile_0.75,T,F)
cov.dat$coverage.95 = ifelse(cov.dat$value >= cov.dat$quantile_0.025 & cov.dat$value <= cov.dat$quantile_0.975,T,F)
Percent.Cov.95 <- cov.dat %>% group_by(target, target_end_date) %>%
summarize(Score = round(100*mean(coverage.95, na.rm = T)))
old <- read.csv(paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))[,-c(1)]
old$target_end_date <- as.Date(old$target_end_date, format = "%Y-%m-%d")
Percent.Cov.95 <- unique(data.frame(rbind(Percent.Cov.95, old)))
Percent.Cov.95 <- Percent.Cov.95 %>% dplyr::filter(target_end_date <= as.Date(forecast_date)+30) %>% dplyr::filter(is.na(Score) == F) %>% arrange(target_end_date)
#write.csv(Percent.Cov.95, paste0(dashpath,"/Coverage/pastCoverage2022-2023.csv"))
View(Percent.Cov.95)
library(purrr)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggforce)
library(covidHubUtils)
library(simplets)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#devtools::install_github("reichlab/simplets")
source("fit_baseline_one_location.R")
# Set locations and quantiles
required_quantiles <-
c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99)
required_locations <-
readr::read_csv(file = "https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-locations/locations.csv") %>%
dplyr::select("location", "abbreviation")
# The reference_date is the date of the Saturday relative to which week-ahead targets are defined.
# The forecast_date is the Monday of forecast creation.
# The forecast creation date is set to a Monday,
# even if we are delayed and create it Tuesday morning.
reference_date <- lubridate::floor_date(Sys.Date(), unit = "week") - 1
forecast_date <- as.character(reference_date + 2)
# Load data
data <- readr::read_csv("https://raw.githubusercontent.com/cdcepi/Flusight-forecast-data/master/data-truth/truth-Incident%20Hospitalizations.csv") %>%
dplyr::filter(date >= "2021-12-04") %>%
dplyr::arrange(location, date)
location_number <- nrow(required_locations)
# fit baseline models
quantile_forecasts <-
purrr::map_dfr(
required_locations$location,
function(loc) {
print(loc)
location_data <- data %>%
dplyr::filter(location == loc)
location_results <-
fit_baseline_one_location(
reference_date = reference_date,
location_data = location_data,
transformation = "none",
symmetrize = TRUE,
window_size = nrow(data),
taus = required_quantiles
)
return(location_results)
}) %>%
dplyr::select(-model)
if (!dir.exists("weekly-submission/forecasts/Flusight-baseline/")) {
dir.create("weekly-submission/forecasts/Flusight-baseline/",
recursive = TRUE)
}
if (!dir.exists("weekly-submission/plots/Flusight-baseline/")) {
dir.create("weekly-submission/plots/Flusight-baseline/",
recursive = TRUE)
}
base_file <- paste0("/Flusight-baseline/", forecast_date, "-Flusight-baseline")
results_path <- paste0("weekly-submission/forecasts", base_file, ".csv")
plot_path <- paste0("weekly-submission/plots", base_file, ".pdf")
# write forecast submission file
write.csv(quantile_forecasts, file = results_path, row.names = FALSE)
# plot
f <- covidHubUtils::load_forecasts_repo(
file_path = paste0('weekly-submission/forecasts/'),
models = 'Flusight-baseline',
forecast_dates = forecast_date,
locations = NULL,
types = NULL,
targets = NULL,
hub = "FluSight",
verbose = TRUE
)
p <-
covidHubUtils::plot_forecasts(
forecast_data = f,
facet = "~location",
hub = "FluSight",
truth_source = "HealthData",
subtitle = "none",
title = "none",
show_caption = FALSE,
plot = FALSE
) +
scale_x_date(
breaks = "1 month",
date_labels = "%b-%y",
limits = as.Date(c(
reference_date - (7 * 32), reference_date + 28
), format = "%b-%y")
) +
theme(
legend.position = "bottom",
legend.direction = "vertical",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank()
) +
ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = 1
)
n <- n_pages(p)
pdf(
plot_path,
paper = 'A4',
width = 205 / 25,
height = 270 / 25
)
for (i in 1:n) {
suppressWarnings(print(
p + ggforce::facet_wrap_paginate(
~ location,
scales = "free",
ncol = 2,
nrow = 3,
page = i
)
))
}
dev.off()
